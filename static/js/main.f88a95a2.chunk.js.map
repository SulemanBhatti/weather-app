{"version":3,"sources":["components/WeatherCard/WeatherCardListItem.jsx","components/WeatherCard/WeatherCard.jsx","components/CityMap/CityMap.jsx","components/WeatherLineGraph/WeatherLineGraph.jsx","ui-components/Button/Button.jsx","ui-components/InputDropdown/InputDropdown.jsx","ui-components/Header/Header.jsx","services/getCitiesLocation.js","services/getWeatherForecast.js","pages/MainScreen/MainScreen.jsx","pages/MapScreen/MapScreen.jsx","App.js","index.js"],"names":["WeatherCardListItem","props","className","src","icon","alt","celsius","feelsLike","description","date","WeatherCard","weatherForecast","map","i","key","day","avgtemp_c","hour","feelslike_c","condition","text","Map","ReactMapboxGl","accessToken","CityMap","withRouter","useState","userCordinates","setUserCordinates","match","params","longitude","latitude","cityCordinates","useEffect","navigator","geolocation","getCurrentPosition","position","coords","style","containerStyle","height","width","center","userLocation","zoom","type","id","layout","coordinates","anchor","WeatherLineGraph","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","data","state","setState","options","title","display","fontSize","legend","Button","link","to","onClick","InputDropdown","cities","getCity","selectedCity","setSelectedCity","onChange","e","onChangeHandler","placeholder","Header","header","cityData","a","where","encodeURIComponent","JSON","stringify","fetch","headers","response","json","getWeatherForecast","city","value","MainScreen","setWeatherForecast","forecast","forecastday","MapScreen","mapLocation","setMapLocation","App","setCities","formattedData","results","name","location","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f88a95a2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const WeatherCardListItem = (props) =>{\r\n    return (\r\n        <div className=\"WeatherCardListItem\">\r\n           <div className=\"WeatherTempLayout\">\r\n           <img className=\"WeatherImg\" src={props.icon} alt=\"image\" />\r\n           <strong className=\"WeatherCardListing\"><h1>{props.celsius}</h1><p>°C</p></strong>\r\n           <p className=\"WeatherCardListing\"><h4>| Feel Like: {props.feelsLike}°C</h4></p>\r\n           </div>\r\n           <p>{props.description}</p>\r\n           <p>Date: {props.date}</p>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { WeatherCardListItem } from './WeatherCardListItem';\r\nimport './WeatherCard.css';\r\n\r\nexport const WeatherCard = ({weatherForecast}) =>{\r\n\r\n    return (\r\n        <section className=\"wrapper\">\r\n        <div className=\"WeatherCard\">\r\n            {weatherForecast?.map((i, key)=>{\r\n            return <WeatherCardListItem \r\n                key = {key}\r\n                celsius={i.day.avgtemp_c || '---'} \r\n                feelsLike={i.hour[0]?.feelslike_c || '---'} \r\n                icon={i.day.condition.icon || '---'}\r\n                date = {i.date || '---'}\r\n                description= {i.day.condition.text || '---'}\r\n            />\r\n             })}\r\n        </div>\r\n        </section>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport ReactMapboxGl, { Layer, Feature, Marker } from 'react-mapbox-gl';\r\nimport { withRouter } from \"react-router\";\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport './CityMap.css';\r\n\r\nconst Map = ReactMapboxGl({\r\n    accessToken:\r\n      'pk.eyJ1Ijoic3VsZW1hbi1haG1hZCIsImEiOiJja3ZlNzNuaXY0OWk1MzFscGNvZXZvOWFnIn0.82aTe4nGysydbvetD4hQOw'\r\n  });\r\n\r\nconst CityMaps = (props) =>{\r\n    const [userCordinates, setUserCordinates] = useState([]);\r\n    const [cityCordinates] =  useState([props.match.params.longitude, props.match.params.latitude]);\r\n\r\n    useEffect(()=>{\r\n        navigator.geolocation.getCurrentPosition(function(position) {\r\n            setUserCordinates([position.coords.longitude, position.coords.latitude]);\r\n        });\r\n    },[]);\r\n    \r\n    return (\r\n        <div className=\"CityMap\">\r\n        <Map\r\n        style=\"mapbox://styles/mapbox/streets-v9\"\r\n        containerStyle={{\r\n            height: '100vh',\r\n            width: '100vw',\r\n        }}\r\n        center = {props.userLocation === \"user\" ? userCordinates : cityCordinates}\r\n        zoom = {[11]}\r\n        >\r\n        <Layer type=\"symbol\" id=\"marker\" layout={{ 'icon-image': 'marker-15' }}>\r\n        </Layer>\r\n        <Feature coordinates={props.userLocation === \"user\" ? userCordinates : cityCordinates} />\r\n        <Marker\r\n            coordinates={props.userLocation === \"user\" ? userCordinates : cityCordinates}\r\n            anchor=\"bottom\">\r\n            <img src='/images/mapbox-icon.png' className=\"marker\"/>\r\n        </Marker>\r\n        </Map>\r\n        </div>\r\n    )};\r\n\r\n    export const CityMap = withRouter(CityMaps);","import React, { useEffect, useState } from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport './WeatherLineGraph.css';\r\n\r\nexport const WeatherLineGraph = ({weatherForecast}) => {\r\n\r\n    const [ state, setState ] = useState({\r\n      labels: ['1', '2', '3',\r\n    '4', '5'],\r\n    datasets: [\r\n     {\r\n     label: 'Weekly Weather Forecast',\r\n     fill: false,\r\n     lineTension: 0.5,\r\n     backgroundColor: 'rgba(75,192,192,1)',\r\n     borderColor: 'rgba(0,0,0,1)',\r\n     borderWidth: 2,\r\n     data: [0, 0, 0, 0, 0]\r\n    }]\r\n  });\r\n\r\n    useEffect(()=>{\r\n      const labels = weatherForecast?.map(i=>i.date);\r\n      const data = weatherForecast?.map(i=>i.day.avgtemp_c);\r\n      setState({\r\n      labels: labels,\r\n      datasets: [\r\n       {\r\n       label: 'Weekly Weather Forecast',\r\n       fill: false,\r\n       lineTension: 0.5,\r\n       backgroundColor: 'rgba(75,192,192,1)',\r\n       borderColor: 'rgba(0,0,0,1)',\r\n       borderWidth: 2,\r\n       data: data\r\n      }]\r\n    })\r\n      \r\n    },[weatherForecast]);\r\n\r\n\r\n    return (\r\n      <div className=\"WeatherLineGraph\">\r\n        <Line\r\n          data={state}\r\n          options={{\r\n            title:{\r\n              display:true,\r\n              text:'Average Rainfall per month',\r\n              fontSize:20\r\n            },\r\n            legend:{\r\n              display:true,\r\n              position:'right'\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Button.css';\r\n\r\nexport const Button = props =>\r\n  !props.link ? (\r\n    <button\r\n      className={'button'}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.label}\r\n    </button>\r\n  ) : (\r\n    <Link\r\n      className={'button'}\r\n      to={props.link}\r\n    >\r\n      {props.label}\r\n    </Link>\r\n  );\r\n","import React, {useState, useEffect} from 'react';\r\nimport Select from 'react-select';\r\nimport './InputDropdown.css';\r\n\r\nexport const InputDropdown = ({cities, getCity}) => {\r\n  const [ selectedCity, setSelectedCity] = useState({});\r\n  \r\n  //not a good approach and have to use central store for such operation\r\n  //Due to limited time doing this\r\n  useEffect(()=>{\r\n    getCity(selectedCity);\r\n  },[selectedCity]);\r\n  \r\n  const onChangeHandler = (e) =>{\r\n    setSelectedCity(e);\r\n  }\r\n\r\n    return(\r\n    <div className=\"InputDropdown\">\r\n        <Select \r\n          className=\"select\" \r\n          options={cities} \r\n          onChange={(e)=>onChangeHandler(e)}\r\n          placeholder=\"Islamabad\"\r\n          />\r\n    </div>\r\n    )\r\n};","import React from 'react';\r\nimport './Header.css';\r\n\r\nexport const Header = (props) =>{\r\n    return (\r\n        <header className=\"App-header\">\r\n            <h3>{props.header}</h3>\r\n        </header>\r\n    );\r\n}","export const cityData = (async () => {\r\n  const where = encodeURIComponent(JSON.stringify({\r\n    \"country\": {\r\n      \"$exists\": true\r\n    },\r\n    \"location\": {\r\n      \"$exists\": true\r\n    },\r\n    \"name\": {\r\n      \"$exists\": true\r\n    }\r\n  }));\r\n  const response = await fetch(\r\n    `https://parseapi.back4app.com/classes/Pakistancities_City?limit=999&order=country,name,location&keys=name,country,location&where=${where}`,\r\n    {\r\n      headers: {\r\n        'X-Parse-Application-Id': 'KTx9m5W9R5WK1ZJtAlsHEKA8HG6CEd13Q4KUrdoU', // This is your app's application id\r\n        'X-Parse-REST-API-Key': 'atZjkHhHtCy6JX6LbaCzj2iIZmbTNfPwY6mG634i', // This is your app's REST API key\r\n      }\r\n    }\r\n  );\r\n  const data = await response.json(); // Here you have the data that you need\r\n  return data;\r\n})();","export const getWeatherForecast = async(city)=>{\r\n\r\n    // Forecast API is only giving data for 3 days so, to display functionality I used history to fetch 7 days weather data\r\n    //Here is the endpoint for Forecast API you can test it is only giving 3 days forecast\r\n    //http://api.weatherapi.com/v1/forecast.json?key=fb24143f0b094065849152703213110&q=Karachi&days=7&hour=0\r\n    \r\n    const response = await fetch(\r\n        `https://api.weatherapi.com/v1/history.json?key=fb24143f0b094065849152703213110&q=${city.value ? city.value : 'Islamabad'}&aqi=no&dt=2021-10-25&end_dt=2021-10-31&hour=0`\r\n      );\r\n      const data = await response.json(); // Here you have the data that you need\r\n      return data;\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { WeatherCard, WeatherLineGraph } from '../../components';\r\nimport { Header, InputDropdown, Button } from '../../ui-components';\r\nimport { getWeatherForecast } from '../../services';\r\n\r\nexport const MainScreen = ({cities}) =>{\r\n    //Default coords set to Capital of Pakistan, Islamabad\r\n    const [ selectedCity, setSelectedCity] = useState({latitude: 24.69904, longitude: 70.17982});\r\n    const [ weatherForecast, setWeatherForecast ] = useState([]);\r\n\r\n    useEffect(async()=>{\r\n        const data = await getWeatherForecast(selectedCity);\r\n        setWeatherForecast(data?.forecast?.forecastday);\r\n    },[selectedCity]);\r\n    \r\n    const getCity = (city) =>{\r\n        setSelectedCity(city);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Header header={\"Weather Forecast for Cities\"}/>\r\n            <InputDropdown cities={cities} getCity={getCity}/>\r\n            <br/>\r\n            <WeatherCard weatherForecast = {weatherForecast}/>\r\n            <br/>\r\n            <WeatherLineGraph weatherForecast = {weatherForecast}/>\r\n            <br/>\r\n            <br/>\r\n           <Button link={`/city_map/${selectedCity.latitude}/${selectedCity.longitude}`} label=\"View city on map\" />\r\n        </>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport { CityMap } from '../../components';\r\nimport { Button } from '../../ui-components';\r\nimport './MapScreen.css';\r\n\r\nexport const MapScreen = () =>{\r\n    const [mapLocation, setMapLocation] = useState('');\r\n\r\n    const setUserLocation = (param) =>{\r\n        setMapLocation(param);\r\n    }   \r\n\r\n    return (\r\n        <div className=\"MapScreen\">\r\n            <CityMap userLocation = {mapLocation}/>\r\n            <Button onClick={()=>setUserLocation('user')} label=\"Where am I?\"/>\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport { MainScreen, MapScreen } from './pages';\r\nimport { cityData } from './services';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [ cities, setCities ] = useState([]);\r\n\r\n  //fetch cities data\r\n  useEffect(async()=>{\r\n    const data = await cityData;\r\n    const formattedData = data?.results?.map(i=>{\r\n      return {value: i.name, label:i.name, latitude: i.location.latitude, longitude: i.location.longitude}\r\n    })\r\n    setCities(formattedData);\r\n  },[]);\r\n\r\n  return (\r\n    <Router>\r\n    <div className=\"App\">\r\n     <Switch>\r\n          <Route path=\"/city_map/:latitude/:longitude\">\r\n            <MapScreen/>\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n          <MainScreen cities={cities}/>\r\n          </Route>\r\n        </Switch>\r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}